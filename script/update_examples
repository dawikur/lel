#!/usr/bin/env python

# Copyright 2017, Dawid Kurek, <dawikur@gmail.com>

from __future__ import print_function

import argparse

EXAMPLE_BEGIN = r'/// BEGIN'
EXAMPLE_NEXT = r'// '
EXAMPLE_END = r'/// END'

EXAMPLES_BEGIN = r'[//]:#(EXAMPLES_BEGIN)'
EXAMPLES_END = r'[//]:#(EXAMPLES_END)'


def parse_args():
    parser = argparse.ArgumentParser(
        description='Use one file to update README')
    parser.add_argument('-r', '--readme',
                        default='README.md',
                        help='Destination README filename')
    parser.add_argument('-e', '--examples',
                        default='test/sanitize/sanitize.cpp',
                        help='File with examples')

    return parser.parse_args()


def load_examples(filename):
    class Result(object):
        def __init__(self, name, lines):
            self.name = name
            self.lines = lines

    class Context(object):
        def __init__(self):
            self.result = []
            self.name = ""
            self.current = []

    def _reset(context, line, tag):
        context.name = line.replace(tag, "").strip()
        context.current = []

    def _store(context):
        context.result.append(Result(context.name, context.current))
        _reset(context, line, EXAMPLE_NEXT)

    def _wait_for(line, context):
        if EXAMPLE_BEGIN in line:
            _reset(context, line, EXAMPLE_BEGIN)

            return _example

        return _wait_for

    def _example(line, context):
        if EXAMPLE_NEXT in line:
            _store(context)

            return _example

        if EXAMPLE_END in line:
            _store(context)

            return _end

        context.current.append(line.strip("\r\n"))
        return _example

    def _end(*_):
        return _end

    context = Context()
    with open(filename, "r") as examples:
        state = _wait_for
        for line in examples:
            state = state(line, context)

    return context.result


def load_readme(filename):
    class Context(object):
        def __init__(self):
            self.before = []
            self.after = []

    def _before(line, context):
        context.before.append(line)

        if EXAMPLES_BEGIN in line:
            return _in

        return _before

    def _in(line, context):
        if EXAMPLES_END in line:
            context.after.append(line)
            return _after

        return _in

    def _after(line, context):
        context.after.append(line)
        return _after

    context = Context()
    with open(filename, "r") as readme:
        state = _before
        for line in readme:
            state = state(line, context)

    return [
        "".join(context.before),
        "".join(context.after)
    ]


def parse(examples):
    def _name(key):
        return "### {}". format(key).strip(" ")

    def _lines(lines):
        return "```cpp\n{}```".format(
            "\n".join(lines)
        )

    result = ""

    for example in examples:
        result += "\n"
        result += _name(example.name)
        result += "\n"
        result += "\n"
        result += _lines(example.lines)
        result += "\n"

    return result


def save(in_readme, before, result, after):
    with open(in_readme, "w") as readme:
        readme.write(before)
        readme.write(result)
        readme.write("\n")
        readme.write(after)


def main():
    args = parse_args()

    examples = load_examples(args.examples)
    result = parse(examples)
    readme = load_readme(args.readme)

    save(args.readme, readme[0], result, readme[1])


if __name__ == '__main__':
    main()
