#!/usr/bin/python

import csv
import sys


class flow(object):
    def __init__(self, val):
        self._val = val

    def __or__(self, func):
        return flow(func(self._val))


class multimap(object):
    def __init__(self, map, *keys):
        self._map, self._key = multimap._ensure_keys_exists(map, keys)

    @staticmethod
    def _ensure_keys_exists(map, keys):
        for key in keys[:-1]:
            if not key in map:
                map[key] = {}
            map = map[key]

        return map, keys[-1]

    def __le__(self, val):
        self._map[self._key] = val


def load(in_file):
    benchmarks = []
    with open(in_file) as file_csv:
        reader = csv.DictReader(file_csv)
        for row in reader:
            benchmarks.append(row)
    return benchmarks


def parse(benchmarks):
    parsed = {}

    for benchmark in benchmarks:
        experiment = benchmark["Experiment"]
        _, arguments, variables = benchmark["Group"].split("_")
        value = benchmark["Min (us)"]

        multimap(parsed, experiment, arguments, variables) <= value

    return parsed


def format(parsed):
    result = ""

    for type, data in sorted(parsed.items()):
        result += type + '\n'

        variables_printed = False
        for arguments, entry in sorted(data.items()):
            if not variables_printed:
                result += '\t'
                for key in sorted(entry.keys()):
                    result += key + '\t'
                result += '\n'
                variables_printed = True

            result += arguments + '\t'
            for variables, value in sorted(entry.items()):
                result += value + '\t'
            result += '\n'
        result += '\n'

    return result


def main():
    flow(sys.argv[1])   \
        | load          \
        | parse         \
        | format        \
        | print


if __name__ == "__main__":
    main()
