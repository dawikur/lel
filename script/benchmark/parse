#!/usr/bin/python

# Copyright 2018, Dawid Kurek, <dawikur@gmail.com>

import csv
import sys


class Flow(object):
    def __init__(self, val):
        self._val = val

    def __or__(self, func):
        return Flow(func(self._val))


class Multimap(object):
    def __init__(self, dictionary, *keys):
        self._map, self._key = Multimap._ensure_exists(dictionary, keys)

    @staticmethod
    def _ensure_exists(dictionary, keys):
        for key in keys[:-1]:
            if key not in dictionary:
                dictionary[key] = {}
            dictionary = dictionary[key]

        return dictionary, keys[-1]

    def __le__(self, val):
        self._map[self._key] = val


def load(in_file):
    benchmarks = []
    with open(in_file) as file_csv:
        reader = csv.DictReader(file_csv)
        for row in reader:
            benchmarks.append(row)
    return benchmarks


def parse(benchmarks):
    parsed = {}

    for benchmark in benchmarks:
        experiment = benchmark["Experiment"]
        _, arguments, variables = benchmark["Group"].split("_")
        value = benchmark["Min (us)"]

        Multimap(parsed, experiment, arguments, variables) <= value

    return parsed


def reformat(parsed):
    result = ""

    for index, data in sorted(parsed.items()):
        result += index + '\n'

        variables_printed = False
        for arguments, entry in sorted(data.items()):
            if not variables_printed:
                result += '\t'
                for key in sorted(entry.keys()):
                    result += key + '\t'
                result += '\n'
                variables_printed = True

            result += arguments + '\t'
            for _, value in sorted(entry.items()):
                result += value + '\t'
            result += '\n'
        result += '\n'

    return result


def main():
    Flow(sys.argv[1])   \
        | load          \
        | parse         \
        | reformat      \
        | print


if __name__ == "__main__":
    main()
